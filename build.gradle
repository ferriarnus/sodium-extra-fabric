buildscript {
    dependencies {
        classpath "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate}"
    }
    repositories {
        maven {
            name = 'CrowdinTranslate source'
            url = "https://minecraft.guntram.de/maven/"
        }
    }
}

plugins {
    id 'signing'
    id 'dev.architectury.loom'  version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.10.0'
}

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.crowdinProjectName = 'sodium-extra'
crowdintranslate.minecraftProjectName = 'sodium-extra'
crowdintranslate.verbose = false

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = createVersionString()
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/sodium-extra.accesswidener")
}

repositories {
    maven { 
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }
    maven { url "https://maven.neoforged.net" }
    maven { url = "https://maven.blamejared.com" }
    maven {
        url = "https://repo.redlance.org/public"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:1.21+build.4")
    }
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    modImplementation("org.embeddedt:embeddium-1.21:1.0.5-git-f5eb29c+mc1.21")
    implementation include("com.github.dima_dencep.mods:NanoLiveConfig:2.2.0")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

build {
    dependsOn downloadTranslations
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        maven {
            name = "FlashyReeseReleases"
            url = "https://maven.flashyreese.me/releases"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "FlashyReeseSnapshots"
            url = "https://maven.flashyreese.me/snapshots"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

def createVersionString() {
    def builder = new StringBuilder()

    def isReleaseBuild = project.hasProperty("build.release")
    def buildId = System.getenv("GITHUB_RUN_NUMBER")

    if (isReleaseBuild) {
        builder.append(mod_version)
    } else {
        builder.append(mod_version.split('-')[0])
        builder.append("-snapshot")
    }

    builder.append("+mc").append(minecraft_version)

    if (!isReleaseBuild) {
        if (buildId != null) {
            builder.append("-build.${buildId}")
        } else {
            builder.append("-local")
        }
    }

    return builder.toString()
}
